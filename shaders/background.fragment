precision mediump float;

varying vec2 fragmentCoordinate;

uniform float time;
uniform vec2 cursorPosition;
uniform vec3 accentColor;

float activeSpeed = 0.1;
float ambientSpeed = 0.01;
float mouseEffectDistance = 1.0;
float zoom = 0.3;

void main() {
    float degree = 2.5 + sin(time + time * 1.37) / 2.0;
    vec2 centerFactor = pow(abs((fragmentCoordinate - 0.5) * 2.0), vec2(degree)) * zoom;
    float centerFade = centerFactor.x + centerFactor.y;
    float mouseDistanceModifier = pow(1.0 - min(distance(cursorPosition, fragmentCoordinate), mouseEffectDistance) / mouseEffectDistance, 3.0);
    vec2 mid1A = mod(fragmentCoordinate * 2.0, 2.0) - 213.0;
    vec2 mid2A = vec2(mid1A);
    float intensityA = 0.003;
    float whimsyA = 1.0;
    vec2 mid1B = mod(fragmentCoordinate * 3.0, 3.0) - 213.0;
    vec2 mid2B = vec2(mid1B);
    float intensityB = 0.002;
    float whimsyB = 1.0;
    for (int i = 0; i < 8; i++) {
        float timeA = (time * ambientSpeed + 23.0) * (1.0 - (3.5 / float(i + 1)));
		mid2A = mid1A + vec2(cos(timeA - mid2A.x) + sin(timeA + mid2A.y), sin(timeA - mid2A.y) + cos(timeA + mid2A.x));
        whimsyA += 1.0 / length(vec2(mid1A.x / (sin(mid2A.x + timeA) / intensityA), mid1A.y / (cos(mid2A.y + timeA) / intensityA)));
    
        float timeB = (time * activeSpeed + 23.0) * (1.0 - (3.5 / float(i + 1)));
		mid2B = mid1B + vec2(cos(timeB - mid2B.x) + sin(timeB + mid2B.y), sin(timeB - mid2B.y) + cos(timeB + mid2B.x));
        whimsyB += 1.0 / length(vec2(mid1B.x / (sin(mid2B.x + timeB) / intensityB), mid1B.y / (cos(mid2B.y + timeB) / intensityB)));
    }    
    whimsyA = 1.0 - pow(whimsyA / 8.0, 1.4);
    whimsyB = 1.2 - whimsyB / 8.0;
    vec3 ambientColor = vec3(whimsyA * centerFade);
    vec3 activeColor = accentColor * vec3(clamp(whimsyB * mouseDistanceModifier, 0.0, 1.0));           
    gl_FragColor = vec4(activeColor + ambientColor, 1.0);
}